---
title: "Crimes in Chicago"
subtitle: "Final Presentation"
format:
    revealjs: 
      # embed-resources: true
      slide-number: true
      chalkboard: 
        buttons: false
      preview-links: auto
      css: styles.css
      footer: STAT 405 - Benjamin Mao, Cecilia Xin, Monica Liu, Jared Boyd
server: shiny

---


## Outline

-   Introduction: Datasets Description & Data Cleaning
-   Data Analysis and Modeling
-   Text Mining
-   Killer PLot
-   Conclusion

# Introduction {background="#6B6B6B"}

##   Data Description
::: incremental 
-   Primary dataset: all reported crimes in Chicago from 2001 to Feb. 24, 2024
-   Secondary dataset: “Police_Stations”(shows the current location of police stations in Chicago)
-   Third dataset: “Chicago Map”(describes the geological boundaries of areas in Chicago)
:::

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
# library(readr)
# crimes_data <- read_csv("Crimes_-_2001_to_Present.csv", show_col_types = FALSE)
# police_stations_data <- read_csv("Police_Stations.csv", show_col_types = FALSE)
```

::: footer
Learn more: [primary data](https://catalog.data.gov/dataset/crimes-2001-to-present) &  [secondary data](https://data.cityofchicago.org/Public-Safety/Police-Stations/z8bn-74gv/data_preview)
::: 

## Data Cleaning
-  Key columns from primary dataset: "Date", "Primary Type", "Arrest", "Year", "Latitude", and "Longitude"
-  No data cleaning is needed for second and third datasets
-  Add primary and secondary datasets to SQLite
```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
# Read from Crimes_and_Police_Stations to get crimes_data
# The directory is ./data/Crimes_and_Police_Stations.sqlite
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "./data/Crimes_and_Police_Stations.sqlite")
crimes_data <- dbGetQuery(con, "SELECT * FROM crimes_data")
police_stations_data <- dbGetQuery(con, "SELECT * FROM police_stations_data")


```

# Data Analysis and Modeling {background="#6B6B6B"}

## When crimes are committed 
###   Line Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
library(RSQLite)
library(DBI)

# Query total crimes per year
total_crimes_by_year <- dbGetQuery(con, "
  SELECT Year, COUNT(*) AS Total
  FROM crimes_data
  GROUP BY Year
")

# Query number of crimes with arrest per year
arrests_by_year <- dbGetQuery(con, "
  SELECT Year, SUM(CASE WHEN Arrest = 1 THEN 1 ELSE 0 END) AS Arrest_num
  FROM crimes_data
  GROUP BY Year
")

# Query number of crimes without arrest per year
non_arrests_by_year <- dbGetQuery(con, "
  SELECT Year, SUM(CASE WHEN Arrest = 0 THEN 1 ELSE 0 END) AS Non_Arrest_num
  FROM crimes_data
  GROUP BY Year
")

# Merge the data frames
merged_data <- merge(total_crimes_by_year, arrests_by_year, by = "Year")
merged_data <- merge(merged_data, non_arrests_by_year, by = "Year")

plot(merged_data$Year, merged_data$Total, 
     type = "o",  
     xlab = "Year", ylab = "Number of Crimes",
     main = "Total Crimes, Arrests, and Non-Arrests from 2001 to 2023",
     col = "blue", pch = 16, ylim = c(0, max(merged_data$Total)))
lines(merged_data$Year, merged_data$Arrest_num, 
      type = "o", 
      col = "green", pch = 16)
lines(merged_data$Year, merged_data$Non_Arrest_num, 
      type = "o", 
      col = "red", pch = 16)
legend("topright", legend = c("Total Crimes", "Arrests", "Non-Arrests"), 
       col = c("blue", "green", "red"), pch = 16, cex = 0.8)

```

##    Ridgeline Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
# library
library(ggridges)
library(ggplot2)
library(viridis)
# install.packages("hrbrthemes")
library(hrbrthemes)
# install.packages("dplyr")
library(dplyr)
library(sqldf)

# Use dplyr to create the crimes_per_day data frame
# crimes_per_day <- crimes_data %>% 
#   group_by(YearMonthDate, Month) %>% 
#   summarise(n = n())


# SQL query to create the crimes_per_day data frame, and add a column called Month
crimes_per_day <- sqldf("
  SELECT YearMonthDate, Month,
  COUNT(*) as n
  FROM crimes_data
  GROUP BY YearMonthDate, Month
")

# Create the ridgeline plot for the crimes_data
ggplot(crimes_per_day, aes(x = `n`, y = `Month`, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis(name = "Number of Crimes", option = "C") +
  labs(title = 'Number of Crimes in Chicago per Month', x = "Number of Crimes", y = "") +
  scale_y_discrete(labels = month.name) +
  theme_ipsum() +
  theme(
    legend.position="none",
    panel.spacing = unit(0.1, "lines"),
    strip.text.x = element_text(size = 8)
  )
```

##    Density Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
date = substr(crimes_data$Date, 1, 10)
years_after <- as.numeric(substr(date, 1, 2)) / 30 +
              as.numeric(substr(date, 4, 5)) / 365 +
              as.numeric(substr(date, 7, 10))
density = density(years_after)
ggplot(data.frame = density) +
  aes(density$x, density$y) +
  geom_line() +
  labs(x = "Year", y = "Density", title = "Density of Crime over Time")
```

##     Lollipop Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
# Libraries
library(ggplot2)

# Use dplyr to create the crimes_per_hour data frame
# crimes_per_hour <- crimes_data %>% 
#   group_by(Hour) %>% 
#   summarise(n = n())

# SQL query to create the crimes_per_hour data frame
crimes_per_hour <- sqldf("
  SELECT 
    Hour, 
    COUNT(*) as Number_of_Crimes
  FROM 
    crimes_data
  GROUP BY Hour
  ORDER BY Hour
")
# Create data for plotting
data <- data.frame(
  x = crimes_per_hour$Hour,
  y = crimes_per_hour$Number_of_Crimes
)
# Plot
ggplot(data, aes(x=x, y=y)) +
  geom_segment(aes(x=x, xend=x, y=0, yend=y), color="skyblue") +
  geom_point(color="skyblue", size=3) +
  theme_minimal() +
  labs(title = "Number of Crimes in Chicago per Hour",
       x = "Hours",
       y = "Number of Crimes")
```


## Where crimes are committed

###     Packed Circle Chart

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
# libraries
# install.packages("packcircles")
library(packcircles)
# install.packages("ggplot2")
library(ggplot2)
# install.packages("viridis")
library(viridis)

table = table(crimes_data$`Location Description`)
ordered_location = table[order(table, decreasing = TRUE)][1:5]
# Convert into a dataframe with two columns: group and value
crime_counts <- data.frame(
  `Primary Type` = names(ordered_location),
  count = ordered_location
)

# print(crime_counts)

# libraries
library(packcircles)
library(ggplot2)
library(viridis)
# df <- data.frame(group = c("A", "B", "C", "D"),
#                  value = c(10, 15, 20, 25))
group = crime_counts$count.Var1
value = crime_counts$count.Freq

ggplot(crime_counts, aes(x = group, y = group, size = value, label = group)) +
  geom_point(alpha = 0.7) +
  scale_size_area(max_size = 20) +
  theme_minimal() +
  theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank()) +
  labs(title = "Packed Circle Chart",
       x = "Group",
       y = "",
       size = "Value") +
  geom_text(color = "lightblue", size = 3)

```

##     Facet Wrap Graph

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
common_crimes = sort(table(crimes_data$`Primary Type`), decreasing = TRUE)[1:9]

filter = crimes_data$`Primary Type` %in% names(common_crimes)

dist = crimes_data$District[filter == TRUE]
type = crimes_data$`Primary Type`[filter == TRUE]
# print(length(dist))
# print(length(type))
crimes_data_filtered = data.frame(District = dist, Type = type)

# Plot
ggplot(crimes_data_filtered, aes(x = as.numeric(District))) +
  geom_bar(aes(fill = Type), position = "dodge") +
  facet_wrap(~Type, ncol = 3) +
  theme(axis.text.x = element_text(size = 7)) +
  labs(title = "Frequency of Crimes in Each District",
       x = "District",
       y = "Frequency of Crimes")

```

##     Scatter Plot with District Lines

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
#| 
sampled_crimes <- crimes_data[sample(1:nrow(crimes_data), 10000), ]
library(sf)
shapes = st_read("./data/Boundaries - Police Districts (current)/geo_export_f2fab567-0511-4fce-901e-2f53fcec44f7.shp", quiet = TRUE)

ggplot() +
  geom_sf(data = shapes) +
  coord_sf() +
  geom_point(aes(x = sampled_crimes$Longitude, y = sampled_crimes$Latitude,),
             size = 0.5, alpha = 0.5, color = "red") +
  labs(title = "Scatterplot of Crime Locations with District Lines",
       x = "Longitude", y = "Latitude")

```

::: footer
Learn more: [District lines for the scatter plot](https://data.cityofchicago.org/Public-Safety/Boundaries-Police-Districts-current-/fthy-xz3r)
:::


# Text Mining   {background="#6B6B6B"}
## Replace pie chart with dplyr pipeline

```{r}
#| echo: false
#| fig-width: 10 # Increase the width of the figure environment
#| fig-height: 10 # Increase the height of the figure environment
library(dplyr)
library(knitr)
library(kableExtra)
freq_types <- crimes_data %>%
  select(`Primary Type`) %>%
  group_by(`Primary Type`) %>%
  summarise(count = n()) %>%
  arrange(desc(count))
kable(head(freq_types, 9), caption = "Number of Crimes Based on Primary Type") %>%
  kable_styling(font_size = 25) # Increase the font size to make the table content larger

```

## Scatterplot analysis {.smaller  .scrollable transition="slide"}

::: panel-tabset 

### Table
```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 4.5
library(dplyr)
# Query for the first area
res1 <- dbSendQuery(conn = con, "
SELECT LATITUDE, LONGITUDE, COUNT(*) AS num_police_stations
FROM police_stations_data
WHERE LATITUDE BETWEEN 41.85 AND 41.90 AND LONGITUDE BETWEEN -87.78 AND -87.60
")
(area1 <- dbFetch(res1))

# Query for the second area
res2 <- dbSendQuery(conn = con, "
SELECT LATITUDE, LONGITUDE, COUNT(*) AS num_police_stations
FROM police_stations_data
WHERE LATITUDE BETWEEN 41.75 AND 41.80 AND LONGITUDE BETWEEN -87.70 AND -87.61
")
(area2 <- dbFetch(res2))
```

### Code
```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
library(dplyr)
# Query for the first area
res1 <- dbSendQuery(conn = con, "
SELECT LATITUDE, LONGITUDE, COUNT(*) AS num_police_stations
FROM police_stations_data
WHERE LATITUDE BETWEEN 41.85 AND 41.90 AND LONGITUDE BETWEEN -87.78 AND -87.60
")
(area1 <- dbFetch(res1))

# Query for the second area
res2 <- dbSendQuery(conn = con, "
SELECT LATITUDE, LONGITUDE, COUNT(*) AS num_police_stations
FROM police_stations_data
WHERE LATITUDE BETWEEN 41.75 AND 41.80 AND LONGITUDE BETWEEN -87.70 AND -87.61
")
(area2 <- dbFetch(res2))
```
:::

## Killer Plot
```{r context="server"}
library(shiny)
library(grid)
library(dplyr)
library(RSQLite)

# read data 
con <- dbConnect(RSQLite::SQLite(), "./data/crimes_data_for_killer_plot.db")
crimes_data_for_killer_plot <- dbGetQuery(con, "SELECT * FROM crimes_data_for_killer_plot")

```


```{r}
#| panel: fill
plotOutput("CrimesPlot")
```

::: {style="font-size: 30%"}

```{r}
#| panel: sidebar
#| layout-ncol: 3

# let district be a vector containing all Zip_Code in crimes_data_for_killer_plot
district <- c("60601", "60602", "60603", "60604", "60605", "60606", "60607", "60608", "60609", "60610", "60611", "60612", "60613", "60614", "60615", "60616", "60617", "60618", "60619", "60620", "60621", "60622", "60623", "60624", "60625", "60626", "60628", "60629", "60630", "60631", "60632", "60633", "60634", "60636", "60637", "60638", "60639", "60640", "60641", "60642", "60643", "60644", "60645", "60646", "60647", "60649", "60651", "60652", "60653", "60654", "60655", "60656", "60657", "60659", "60660", "60661", "60666", "60707", "60827")

# Two slider, one for year 2001-2024, one for month 1-12
sliderInput("year", "Year", min = 2001, max = 2024, value = 2021)
sliderInput("month", "Month", min = 1, max = 12, value = 1)


selectInput("zipcode1", "Column 1 Zip Code", district)
selectInput("zipcode2", "Column 2 Zip Code", district)
selectInput("zipcode3", "Column 3 Zip Code", district)
selectInput("zipcode4", "Column 4 Zip Code",  district)
selectInput("zipcode5", "Column 5 Zip Code", district)

```

:::
```{r context="server"}

draw_circle <- function(row, col, size, color) {
  # Scale the size up for visibility, and add a minimum size
  scaled_size <- max(size * 1, 0.05)  # Adjust the scaling factor as needed
  pushViewport(viewport(layout.pos.row = row+1, layout.pos.col = col))
  grid.circle(gp = gpar(fill = color, alpha = 0.5), r = unit(scaled_size, "npc"))
  popViewport()
}

  get_color <- function(value) {
  if (length(value) != 1 || is.na(value)) {
    return("grey")
  }
  
  color_ramp <- colorRamp(c("black","purple", "red", "pink", "white"))
  value <- min(max(value, 0), 1)
  rgb_val <- color_ramp(value)
  return(rgb(rgb_val[1], rgb_val[2], rgb_val[3], maxColorValue = 255))
}

# Function to calculate size and color for a given district, type, year, and month
calculate_size_color <- function(district, type, year, month) {
  year_month <- paste(year, sprintf("%02d", month), sep = "")
  district_data <- filter(crimes_data_for_killer_plot, Zip_Code == district, YearMonth == year_month)
  
  if (nrow(district_data) == 0) {
    # print(paste("No data for district", district, "in year-month", year_month))
    return(c(0.1, "grey"))  # Set a default size to make it visible for testing
  }
  
  type_district_data <- filter(district_data, `Primary Type` == type)
  type_count <- sum(as.numeric(type_district_data$Num_Crimes), na.rm = TRUE)
  total_type_count <- sum(as.numeric(district_data$Num_Crimes), na.rm = TRUE)
  
  # print(paste("Type count for", type, "in district", district, ":", type_count))
  # print(paste("Total count for district", district, ":", total_type_count))
  
  size <- ifelse(total_type_count > 0, max(as.numeric(type_count) / as.numeric(total_type_count), 0.01), 0.01)
  color <- get_color(mean(as.numeric(type_district_data$Arrest_Rate), na.rm = TRUE))
  
  # print(paste("Zip Code:", district, "Type:", type, "Year:", year, "Month:", month, "Size:", size, "Color:", color))
  
  return(list(size = size, color = color))
}

# Now test this function independently with some known values
# test_result <- calculate_size_color("60601", "THEFT", 2021, 3)
# print(test_result)
```

```{r context="server"}
output$CrimesPlot <- renderPlot({
  
  grid.newpage()
  pushViewport(viewport(layout = grid.layout(7, 6)))
  
  # Crime type labels
  row_labels <- c("THEFT", "BATTERY", "CRIMINAL DAMAGE", "NARCOTICS", "ASSAULT")
  

  # Draw the row labels
  for (row in 1:length(row_labels)) {
    # Calculate the position for each row label
    pushViewport(viewport(layout.pos.row = row+2, layout.pos.col = 1))
    grid.text(row_labels[row], x = 0.5, just = "left", gp = gpar(cex = 0.8)) # Adjust text size with cex if necessary
    popViewport()
  }

  # Draw the circles for each zip code and crime type
  for (col in 1:5) {
    # Obtain the selected zip code for the current column
    zipcode <- switch(col, input$zipcode1, input$zipcode2, input$zipcode3, input$zipcode4, input$zipcode5)
    
    for (row in 1:length(row_labels)) {
      # Calculate the size and color for the current combination of zip code and crime type
      size_color <- calculate_size_color(zipcode, row_labels[row], input$year, input$month)
      
      # Draw the circle at the corresponding position
      draw_circle(row+1, col+1, size_color$size, size_color$color)
    }
  }
  
 # Define legend size and position
  legend_width <- unit(2, "lines")
  legend_height <- unit(1, "npc") # Using normalized parent coordinates for height
  legend_margin <- unit(7, "lines") # Margin between the plot and legend
  legend_x <- unit(1, "npc") - legend_margin  # Position legend to the far right
  legend_y <- unit(0.5, "npc")  # Vertical center

  # Draw the legend box
  grid.rect(x = legend_x, y = legend_y, width = legend_width, height = legend_height,
            just = "right", gp = gpar(fill = NA, col = NA)) # Transparent background for legend box

  # Colors corresponding to the lowest and highest arrest rates
  colors <- c("black", "pink")
  labels <- c("Arrest rate = 0", "Arrest rate = 1")
  
  # Draw the legend keys and labels
  for (i in 1:2) {
    key_y <- legend_y + unit(i - 1.5, "lines")  # Stagger the legend keys vertically
    grid.rect(x = legend_x, y = key_y, width = unit(0.6, "lines"), height = unit(0.6, "lines"),
              just = "right", gp = gpar(fill = colors[i], col = NA))
    grid.text(labels[i], x = legend_x - unit(0.8, "lines"), y = key_y, just = "right")
  }
})
```
## Conclusion

- Greater focus in summer months and evening hours
- More resources in districts 5 - 10
- Police work is complicated and more data is needed to make more specific recommendations
```{r}
#| echo: false
dbDisconnect(con)

```

